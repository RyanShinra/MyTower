# spell-checker: ignore-file
[tool.black]
line-length = 120
target-version = ["py312"]
skip-string-normalization = false
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''
# NOTE: Black's blank line checks conflict with custom formatting rules
# where functions with >5 lines have 2 blank lines before them.
# This is intentional and approved by custom Flake8 rules.
# Black will report files as needing reformatting, but do not apply
# those changes as they will break the custom blank line formatting.

[tool.coverage.run]
# Enable branch measurement to match `--cov-branch`
branch = true
# Measure only the project package
source = ["mytower"]
# Allow parallel-mode (useful when tests run in parallel)
parallel = true

[tool.coverage.report]
# Show missing lines in the terminal (matches --cov-report=term-missing)
show_missing = true
# Don't fail the build by default (adjust as needed)
fail_under = 0

[tool.coverage.html]
# Match pytest-cov's html output target
directory = "htmlcov"

[tool.coverage.xml]
# Match pytest-cov's xml output
output = "coverage.xml"

[tool.ruff]
line-length = 120
target-version = "py313"
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "E203",  # whitespace before ':'
    "E303",  # too many blank lines (using custom X303)
    "E701",  # multiple statements on one line (colon)
    "E702",  # multiple statements on one line (semicolon)
    "E712",  # comparison to True/False (explicitly testing bool values in tests)
    "B007",  # unused loop variable (sometimes needed for count)
    "UP040", # TypeAlias annotation (prefer explicit for clarity in protocols)
    "UP046", # Generic class uses Generic subclass (style preference for clarity)
    "I001",  # Import block is un-sorted (imports organized manually for readability)
]

[tool.ruff.lint.per-file-ignores]
# Protocol files use one-line property definitions by convention
"mytower/game/entities/entities_protocol.py" = ["E701", "E702"]
"mytower/game/core/units.py" = ["E701", "E702"]
"mytower/tests/conftest.py" = ["E701", "E702"]
"mytower/tests/test_utilities.py" = ["E701", "E702"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
